
# What should we call this service?
service: mozdef-event-framework
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  endpointType: REGIONAL
  tracing:
    apiGateway: true
    lambda: true
  tags:
    Project: ${self:custom.cfg.project}
  stackName: ${self:custom.cfg.resource_name}-${self:provider.stage}
  apiName: ${self:custom.cfg.resource_name}-eventframework-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueAttributes
        - sqs:ListQueues
      Resource: arn:aws:sqs:*:*:${self:custom.cfg.resource_name}
    - Effect: Allow
      Action: 
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        - arn:aws:ssm:us-west-2:#{AWS::AccountId}:parameter/auth_token
    # We will add this when we store the token in SSM using KMS  
    # - Effect: Allow
    #   Action: kms:Decrypt
    #   Resource:
    #     - arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/${self:custom.cfg.kms}

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  # This is to keep the package to be uploaded as small as possible in size
  exclude:
    - .venv/**
    - .virtualenv/**
    - .git/**
    - __pycache__/**
    - node_modules/**
    - ./Makefile
    - .vscode
    - tests/**
# include:
#   - include-me.py
#   - include-me-dir/**

functions:
  eventframework:
    handler: handler.lambda_handler
    description: Lambda for handling webhook requests
    environment:
      auth_token: ${ssm:auth_token~true}
    events:
      - http:
          path: ${self:custom.cfg.api_path}
          method: ${self:custom.cfg.api_method}
          async: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    RestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: ${self:custom.cfg.resource_name}-eventframework-${self:provider.stage}
    ResourceQueue:    
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.resource_name}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - DeadLetterQueue
            - Arn
          maxReceiveCount: 10
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.resource_name}-dead-letter-queue
        MessageRetentionPeriod: 1209600

# We will eventually need all these plugins, so adding them here
plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-prune-plugin

custom:
  cfg:
    resource_name: MozDef
    # These are not final values
    api_method: POST
    api_path: zoom
    # kms:          # We will only need this if we choose to a custom KMS other than AWS default
    # ssmZoomToken: ZOOM_AUTH_TOKEN
    project: MozDef
