# Copyright [2018] [Phil Chen]
# Copyright [2019] [Alicia Smith] * Added multiple inputs 
# as well as codecommit source and lambda merge functionality
# drawing from inspiration here:
# https://github.com/tooltwist/codepipeline-artifact-munge

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: 'This solution allows you to create a AWS Codepipline for deploying a serverless application with AWS CodeBuild triggered by a CodeCommit or Github repo commit. The setup of this solution is fully automated via a CloudFormation template.'

Parameters:
  Environment:
    AllowedValues:
    - dev
    - stg
    - prod
    Description: 'Environment'
    Type: 'String'
    Default: 'dev'

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name
    Type: String
    Default: mozdef-ef-utility-bucket

  LambdaBucketPrefix:
    Description: An existing bucket which holds the merger lambda function.
    Type: String
    Default: mozdef-utility-bucket
  
  CodeCommitRepository:
    Description: "CodeCommit repository for config values"
    Type: String
    Default: cag-test-cc-repo
    ConstraintDescription: "Can contain only ASCII characters."

  CodeCommitRepositoryBranch:
    Description: "The name of the branch for the CodeCommit repo"
    Type: String
    Default: master
    ConstraintDescription: "Can contain only ASCII characters."
    
  GitHubRepository:
    Type: String
    Default: caggle/ef-test-codepipeline/advanced
    Description:  owner/repository/branch

  GitHubOAuthToken:
    Type: String
    Default:  GitHub OAuth Token Here
    Description:  CodePipeline requires an OAuthToken

Resources:

  CloudWatchCodeCommitEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CloudWatchCodeCommitEventRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /

  CloudWatchCodeCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source: 
          - aws.codecommit
        detail-type: 
          - "CodeCommit Repository State Change"
        resources: 
          - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          repositoryName:
            - !Ref CodeCommitRepository
          referenceName:
            - !Ref CodeCommitRepositoryBranch
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline] ]
          RoleArn: !GetAtt CloudWatchCodeCommitEventRole.Arn
          Id: !Ref Pipeline

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodeBuildRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodePipelineRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"
  
  CodePipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CodePipelineLambdaRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"

  CloudwatchCodeCommitEventPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CloudwatchCodeCommitEventPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action: codepipeline:StartPipelineExecution
          Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref Pipeline] ]
      Roles:
        - !Ref CloudWatchCodeCommitEventRole

  # This can be restricted more
  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodeBuildPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogGroups'
            - 'logs:FilterLogEvents'
            - 'logs:DescribeLogStreams'
            - 'logs:DeleteLogGroup'
            - 's3:putObject'
            - 's3:getObject'
            - 'codebuild:*'
            - 'codecommit:GetBranch'
            - 'codecommit:GetCommit'
            - 'codecommit:UploadArchive'
            - 'codecommit:GetUploadArchiveStatus'
            - 'codecommit:CancelUploadArchive'
            - 'cloudformation:List*'
            - 'cloudformation:Get*'
            - 'cloudformation:PreviewStackUpdate'
            - 'cloudformation:ValidateTemplate'
            - 'cloudformation:CreateStack'
            - 'cloudformation:CreateUploadBucket'
            - 'cloudformation:DeleteStack'
            - 'cloudformation:Describe*'
            - 'cloudformation:UpdateStack'
            - 'lambda:Get*'
            - 'lambda:List*'
            - 'lambda:CreateFunction'
            - 'lambda:AddPermission'
            - 'lambda:CreateAlias'
            - 'lambda:DeleteFunction'
            - 'lambda:InvokeFunction'
            - 'lambda:PublishVersion'
            - 'lambda:RemovePermission'
            - 'lambda:Update*'
            - 'apigateway:GET'
            - 'apigateway:POST'
            - 'apigateway:PUT'
            - 'apigateway:DELETE'
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            - 's3:ListBucket'
            - 's3:ListBucketVersions'
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:DeleteObject'
            - 'iam:PassRole'
            - 'kinesis:*'
            - 'iam:GetRole'
            - 'iam:CreateRole'
            - 'iam:PutRolePolicy'
            - 'iam:DeleteRolePolicy'
            - 'iam:DeleteRole'
            - 'cloudwatch:GetMetricStatistics'
            - 'events:Put*'
            - 'events:Remove*'
            - 'events:Delete*'
            - 'dynamodb:*'
          Resource: "*"
      Roles:
        -  !Ref CodeBuildRole

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodePipelinePolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            - lambda:InvokeFunction
          Resource:
            - "*"
      Roles:
        -  !Ref CodePipelineRole

  CodePipelineLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CodePipelineLambdaPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
          - Resource: "*"
            Effect: Allow
            Action:
              - lambda:*
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
              - cloudformation:*
              - iam:PassRole
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
              - lambda:Listfunctions
          - Resource: "*"
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
      Roles:
        -  !Ref CodePipelineLambdaRole
  
  S3CodePipeline:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [!Ref CodePipelineBucketPrefix,  "-", !Ref 'AWS::StackName', !Ref 'Environment', "-", !Ref "AWS::Region"]]
  
  MergeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        'Fn::Join': [ "", ["CodePipelineMergeLambda", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      Code:
        S3Bucket: !Join [ "", [!Ref LambdaBucketPrefix,  "-", !Ref 'AWS::StackName', !Ref 'Environment', "-", !Ref "AWS::Region"]]
        S3Key: merge.zip
      Role: !GetAtt CodePipelineLambdaRole.Arn
      Description: "Lambda Function to merge artifacts in CodePipeline"
      Timeout: 30
      Handler: "merge.handler"
      Runtime: "nodejs10.x"
      MemorySize: 128

  TestBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Join ["", ["Test-Build",  "-", !Ref 'AWS::StackName'] ]
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Join [ "", ["buildspec", "-", !Ref 'Environment', ".yml"]]
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:10.1.0
      Artifacts:
        Type: CODEPIPELINE

  BuildDeploy:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Join ["", ["Build-Deploy",  "-", !Ref 'AWS::StackName'] ]
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
            version: 0.2
            phases:
              build:
                commands:
                  - bash deploy.sh
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: env
            Type: PLAINTEXT
            Value: !Ref Environment
        Image: aws/codebuild/nodejs:10.1.0
      Artifacts:
        Type: CODEPIPELINE

  # CodePipeline with its stages:
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join [ "", ["DevOps-Pipeline", "-", !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3CodePipeline
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !Join [ "", ["arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CodePipelineRole  ] ]
      Stages:

        # Stage 1.1:  Get the source from CodeCommit:
        - Name: Source
          Actions:
            - Name: ConfigSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref CodeCommitRepositoryBranch
                RepositoryName: !Ref CodeCommitRepository
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: ConfigSourceOutput
            - Name: CodeSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ "/" , !Ref GitHubRepository ]]
                Repo: !Select [1, !Split [ "/" , !Ref GitHubRepository ]]
                Branch: !Select [2, !Split [ "/" , !Ref GitHubRepository ]]
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: CodeSourceOutput

        # Stage 2: Merge the Sources into one Artifact
        # This merges the App and SecureConfig artifacts
        # See https://dzone.com/articles/running-aws-lambda-functions-in-aws-codepipeline-u
        - Name: Merge
          Actions:
            - Name: Merge-App-and-Config
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref MergeLambda
                UserParameters: "config'"
              InputArtifacts:
                - Name: CodeSourceOutput
                - Name: ConfigSourceOutput
              OutputArtifacts:
                - Name: Build-Ready
              RunOrder: 3
  
        # Stage 3:  Build using Serverless Framework
        - Name: TestBuild
          Actions:
            - Name: !Join [ "", ["TestBuild",  "-", !Ref 'AWS::StackName'] ]
              RunOrder: 5
              InputArtifacts:
                - Name: Build-Ready
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref TestBuild
              OutputArtifacts:
                - Name: Deploy-Ready

        # Stage 4:  Build and Deploy using Serverless Framework
        - Name: BuildDeploy
          Actions:
            - Name: !Join ["", ["BuildDeploy",  "-", !Ref 'AWS::StackName'] ]
              RunOrder: 6
              InputArtifacts:
                - Name: Deploy-Ready
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref BuildDeploy
              OutputArtifacts:
                - Name: Deploy-App

Outputs:
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  CodecommitRepo:
    Value: !Ref CodeCommitRepository
  CodecommitBranch:
    Value: !Ref CodeCommitRepositoryBranch
  GithubRepo:
    Value: !Ref GitHubRepository
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  CodePipelineRole:
    Value: !Ref CodePipelineRole
  CodePipelineLambdaRole:
    Value: !Ref CodePipelineLambdaRole
  CodePipelinePolicy:
    Value: !Ref CodePipelinePolicy
  CodePipelineLambdaPolicy:
    Value: !Ref CodePipelineLambdaPolicy
  S3Codepipeline:
    Value: !Ref S3CodePipeline
